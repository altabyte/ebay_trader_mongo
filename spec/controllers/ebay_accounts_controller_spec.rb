require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe EbayAccountsController, type: :controller do

  let!(:user) { FactoryGirl.create(:user) }
  before { sign_in user }

  after do
    User.all.delete
    EbayAccount.all.delete
  end

  # This should return the minimal set of attributes required to create a valid
  # EbayAccount. As you add validations to EbayAccount, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    FactoryGirl.attributes_for(:ebay_account,
                               'auth_token_expiry_time(1i)' => 2015,
                               'auth_token_expiry_time(2i)' => 9,
                               'auth_token_expiry_time(3i)' => 1,
                               'auth_token_expiry_time(4i)' => 12,
                               'auth_token_expiry_time(5i)' => 30)
  }

  let(:invalid_attributes) {
    FactoryGirl.attributes_for(:ebay_account,
                               auth_token: nil,
                               'auth_token_expiry_time(1i)' => 2015,
                               'auth_token_expiry_time(2i)' => 9,
                               'auth_token_expiry_time(3i)' => 1,
                               'auth_token_expiry_time(4i)' => 12,
                               'auth_token_expiry_time(5i)' => 30)
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # EbayAccountsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe 'GET #index' do
    it 'assigns all ebay_accounts as @ebay_accounts' do
      ebay_account = FactoryGirl.create(:ebay_account, user: user)
      get :index, {}, valid_session
      expect(assigns(:ebay_accounts)).to eq([ebay_account])
    end
  end

  describe 'GET #show' do
    it 'assigns the requested ebay_account as @ebay_account' do
      ebay_account = FactoryGirl.create(:ebay_account, user: user)
      get :show, { id: ebay_account.to_param }, valid_session
      expect(assigns(:ebay_account)).to eq(ebay_account)
    end
  end

  describe 'GET #new' do
    it 'assigns a new ebay_account as @ebay_account' do
      get :new, {}, valid_session
      expect(assigns(:ebay_account)).to be_a_new(EbayAccount)
    end
  end

  describe 'GET #edit' do
    it 'assigns the requested ebay_account as @ebay_account' do
      ebay_account = FactoryGirl.create(:ebay_account, user: user)
      get :edit, { id: ebay_account.to_param }, valid_session
      expect(assigns(:ebay_account)).to eq(ebay_account)
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new EbayAccount' do
        expect {
          post :create, { ebay_account: valid_attributes }, valid_session
        }.to change(EbayAccount, :count).by(1)
      end

      it 'assigns a newly created ebay_account as @ebay_account' do
        post :create, { ebay_account: valid_attributes }, valid_session
        expect(assigns(:ebay_account)).to be_a(EbayAccount)
        expect(assigns(:ebay_account)).to be_persisted
      end

      it 'redirects to index' do
        post :create, { ebay_account: valid_attributes }, valid_session
        #expect(response).to redirect_to(EbayAccount.last)
        expect(response).to redirect_to(ebay_accounts_url)
      end
    end

    context 'with invalid params' do
      it 'assigns a newly created but unsaved ebay_account as @ebay_account' do
        post :create, { ebay_account: invalid_attributes}, valid_session
        expect(assigns(:ebay_account)).to be_a_new(EbayAccount)
      end

      it 're-renders the "new" template' do
        post :create, { ebay_account: invalid_attributes }, valid_session
        expect(response).to render_template('new')
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) {
        hash = valid_attributes
        hash[:auth_token] = hash[:auth_token].reverse
        hash
      }

      it 'updates the requested ebay_account' do
        ebay_account = FactoryGirl.create(:ebay_account, user: user)
        put :update, { id: ebay_account.to_param, ebay_account: new_attributes }, valid_session
        ebay_account.reload
        # skip('Add assertions for updated state')
      end

      it 'assigns the requested ebay_account as @ebay_account' do
        ebay_account = FactoryGirl.create(:ebay_account, user: user)
        put :update, { id: ebay_account.to_param, ebay_account: valid_attributes }, valid_session
        expect(assigns(:ebay_account)).to eq(ebay_account)
      end

      it 'redirects to the ebay_account' do
        ebay_account = FactoryGirl.create(:ebay_account, user: user)
        put :update, { id: ebay_account.to_param, ebay_account: valid_attributes }, valid_session
        expect(response).to redirect_to(ebay_account)
      end
    end

    context 'with invalid params' do
      it 'assigns the ebay_account as @ebay_account' do
        ebay_account = FactoryGirl.create(:ebay_account, user: user)
        put :update, { id: ebay_account.to_param, ebay_account: invalid_attributes }, valid_session
        expect(assigns(:ebay_account)).to eq(ebay_account)
      end

      it 're-renders the "edit" template' do
        ebay_account = FactoryGirl.create(:ebay_account, user: user)
        put :update, { id: ebay_account.to_param, ebay_account: invalid_attributes}, valid_session
        expect(response).to render_template('edit')
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested ebay_account' do
      ebay_account = FactoryGirl.create(:ebay_account, user: user)
      expect {
        delete :destroy, {:id => ebay_account.to_param}, valid_session
      }.to change(EbayAccount, :count).by(-1)
    end

    it 'redirects to the ebay_accounts list' do
      ebay_account = FactoryGirl.create(:ebay_account, user: user)
      delete :destroy, {:id => ebay_account.to_param}, valid_session
      expect(response).to redirect_to(ebay_accounts_url)
    end
  end

end
